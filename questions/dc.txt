According to the text, what defines a distributed system? * A single multi-core computer * A network with infinite bandwidth * A collection of autonomous computing elements * 3
Which of the following isn't one of the 8 fallacies of distributed computing mentioned in the text? * network is reliable * network is fast * Transport cost is zero * 2
Why might someone need a distributed system, according to the text? * To have a single administrator * To reduce performance * To ensure availability * 3
What is necessary for nodes in a distributed system to be coherent? * A global clock * Node failures * Synchronization * 3
According to the text, why might someone choose to implement a distributed system for their application? * To have complete control as a single entity * To reduce costs * To ensure availability even if some components fail * 3
What challenges does the text mention regarding making disparate machines in a distributed system coherent? * Managing group membership and authorizations * Synchronizing global clocks * Centralizing control * 1
What is a transaction in the context of this text? * A change in system configuration * A simultaneous modification of multiple systems * An independent modification in a system that stores data * 3
What are the ACID properties related to transactions? * Availabilty, Isolation, Durability, Consistency * Atomicity, Consistency, Isolation, Durability * Atomicity, Consistency, Integrity, Durability * 2
When discussing the ACID property of Atomicity, what does it mean when a transaction is treated as a single unit? * It can be interrupted and resumed later * It succeeds or fails as a whole * It can be divided into smaller units * 2
Which property ensures that even if transactions run concurrently, the system behaves as if they've been running sequentially? * Atomicity * Durability * Isolation * 3
What is the consequence of a network partition in a distributed system, as mentioned in the text? * Partially offline system until the partition is resolved * Inconsistent and stale data * you have a trade off * 3
Which of the following systems is mentioned as an example of a non-ACID system? * GIT (conflicts) * DNS * both * 3
When were the ACID properties implemented, even though the acronym was coined later? * In 1983 * In 1973 * In 1999 * 2
What does it mean when a system is said to have "partition tolerance" according to the CAP theorem? * The system remains consistent * The system keeps working even if network messages are dropped * Every request receives a non-error response * 2
How does the CAP theorem illustrate the trade-offs in distributed systems? * It shows that you can have all properties simultaneously * It shows that achieving one property may come at the expense of the others * It doesn't address trade-offs in distributed systems * 2
What is an example of a system mentioned in the text that can work with inconsistent functionality? * GIT (conflicts) * Relational databases * Email servers * 1
How does the text describe the behavior of a system when it faces a network partition? * The system guarantees data consistency * The system returns an error * The system loses partition tolerance * 3
In the context of distributed systems, what is the primary purpose of the ACID properties? * To ensure the system remains available at all times * To provide a framework for handling network partitions * To implement transactional consistency and durability * 3
When scaling vertically, what happens when a start-up needs a bigger server? * The cost remains manageable * The server capacity increases proportionally * The cost becomes unmanageable * 3
What is the primary challenge when scaling horizontally in distributed computing? * Coordination and scalability * Increased hardware costs * Lack of redundancy * 1
How does the distributed system ensure scalability in the context of read-intensive workloads? * By replicating all data on each server * By running all write commands on a single server * By executing write commands on all machines and read commands locally * 3
What is the primary challenge when implementing a shared log in a distributed system with a fail-stop failure model? * Delayed communication * Arbitrary message loss * Malicious behavior * 2
In the fail-stop failure model, what is the primary assumption about failed nodes? * They will eventually resume * They lose all their data * They will never resume * 1
What is the primary reason for using a majority-based approach in consensus algorithms? * To minimize the number of servers required * To guarantee that decisions are taken * To ensure there are no conflicting interests * 2
What is the primary focus of Paxos in the context of distributed systems? * Leader election * Cluster management * Achieving consensus * 3
In the context of consensus algorithms, why did Leslie Lamport create Paxos? * To show that Nancy Lynch and Barbara Liskov made mistakes in their system * To prove that achieving consensus in distributed systems is impossible * To demonstrate the correctness of Lynch and Liskov's system * 2
What is the primary challenge in implementing the Paxos algorithm correctly? * Ensuring there are no conflicting interests among participants * Achieving a fast consensus * Understanding and handling the details of the algorithm * 3
In the basic Paxos algorithm, how is a decision reached? * Through a majority vote * Through a centralized coordinator * Through a random selection * 1
What is the primary purpose of leader election in distributed systems? * To ensure all servers have the same data * To minimize the number of servers required * To determine which server can propose values in consensus algorithms * 3
In the fail-stop failure model, what happens if a proposer fails during the "accept" phase? * The decision is immediately finalized * Another proposer eventually takes over and finishes the job * The consensus process starts over from the beginning * 2
What is the primary benefit of the Multi-Paxos approach compared to the basic Paxos algorithm? * It reduces the number of servers required * It ensures faster consensus * It builds a full log of decisions * 3
What does each machine's state represent in the context of Deterministic State Machines? * The machine's location * The machine's configuration * The machine's communication protocol * 2
How is it determined whether two machines are in the same state in Deterministic State Machines? * If they have identical memory * If they receive the same input in the same order * If they have the same initial state * 2
In the context of read-intensive workloads, what is the primary advantage of a distributed system based on deterministic state machines? * Improved scalability due to distributed processing * Reduced hardware requirements * Higher consistency through centralized control * 1
What is the primary reason for having a majority-based approach in consensus algorithms like Paxos? * To minimize hardware costs * To ensure that decisions are taken only when there is unanimous agreement * To prevent malicious behavior * 2
What is the significance of having a majority of nodes agree on a decision in the Paxos algorithm? * It ensures there are no conflicting interests among participants * It guarantees that the decision is correct * It allows for fast consensus * 2
In a fail-stop scenario, what is the primary characteristic of messages exchanged in Paxos? * They may take arbitrary time * They are guaranteed to be delivered instantly * They are encrypted for security * 1
If you have CP of CAP you have: * error * hangs forever * old or random data * 1
If you have AP of CAP you have: * error * hangs forever * old or random data * 3
If you have CA of CAP you have: * error * hangs forever * old or random data * 2
Who is the creator of this circus? * kanye west * lorenzofoschi * filippo ricca * 2
You're doing great :O * right * wrong * wrong * 1
How many round trips has Basic Paxos? * 1 * 2 * 3 * 2
How many round trips has Multi Paxos? * 1 * 2 * 3 * 1
What happens when an Acceptor fails after accepting? * protocol fails completely * proposer didn't received accepts, so he proposes again * proposer received two accepts: majority is ok! * 3
What happens when an Acceptor fails before accepting? * We're 2 out of 3 (proposer + other acceptor): majority is ok! * We're 2 out of 3 (two proposers): majority is ok! * proposer has to repeat proposal again * 1
What happens when a Proposer fails in prepare phase (case seen in lesson)? * protocol fails * Someone, after some time, takes care of it and becomes a proposer * protocol waits for the proposer to re-appear * 2
What happens when a Proposer fails in accept phase (case seen in lesson)? * Someone, after some time, takes care of it and becomes a proposer * protocol waits for the proposer to re-appear * Specifically Node2 propose B but Node3 lets him know that A has already been proposed * 3
What happens when you can't accept something in Paxos? * You go with the smallest previous round number * You go with the highest previous round number * You go with the highest round number between the previous one and what you have received * 2
In Raft, what happens in split vote? * Timeout will take care of removing the stale * A random candidate is chosen as leader * Vote is denied and protocol fails * 1
What happens in Paxos if Node3, after having accepted proposal by Node1 that now is down, receives a proposal from Node2 with something different? * the protocol fails * it promises because the round number is higher than the previous proposal, but it also adds the info of the previous one * it doesn't promise because it already had a previous promise * 2
What is log replication in Raft? * The act of sending hearthbeats * The act of sending log infos with hearthbeats * Building a full log * 2
What happpens if a network partition happens in Raft? * The partition without leader stops to wait the one with the leader * The protocol fails * The partition without leader starts a new vote * 3
What happens when the network partition is solved in Raft? * The leader of the portion that went on with higher numbers will be the new leader * The original leader is restored * A new leader election starts * 1
After network partition, what happens in Raft if the two partitions went both on and have the same number? * Choose depending of who is the previous leader * Another leader election * Choose based on the log with most entries * 3
Which one isn't part of a fail-stop scenario? * computers can take for arbitrary time * one-to-n msgs possibile * msgs can be lost * 2
What is a leader-initiated log-storing log compaction? * A snapshot taken by the leader and stored externally * A snapshot taken by the application and stored externally * A list of checkpoint stored directly on the log * 3 
What is leader-initiated externally-storing log compaction? * A snapshot taken by the leader and stored externally * A list of checkpoint stored directly on the log *A snapshot taken by the application and stored externally * 1
What is indipendently-initiated externally storing log compation? * A snapshot taken by the leader and stored externally * A snapshot taken by the application and stored externally *  A list of checkpoint stored directly on the log * 2
Which are the building blocks of Zoekeeper? * Wait-Free, Ordering, Locks * Wait-Free, Ordering, Change Events * Blocking, Ordering, Change Events * 2
Zoekeeper's ordering means: * writes are linearizable and reads have ACID's isolation * writes are linearizable and reads are serializable * both means the same * 3
Zoekeeper's ordering is with * LIFO * FIFO * both of them * 2
Zoekeeper's Change Event implies that * changes gets notified before the result can be accessed * the opposite * depends * 1
Zoekeeper works like * filesystem for small pieces of data + notify - partial r/w * single point of failure * filesystem for big data + notify - partial r/w * 1
Faster network aka nearer nodes means more failures? * Yes, it's a trade off between space and latency * Yes, it's a trade off between reliability and latency * No * 2
Will Zookeeper become faster or slower by adding new nodes to the cluster? * Slower * Faster for reads, slower for writes * Faster for writes slower for reads * 2
Which consensus Zookeeper uses? * Raft * Similar to Raft, hidden internally* Paxos * 2
Which of these isn't something to take into account for choosing the number of znodes? Performance (of r/w), Costs, Tolerable failures (avaibility) * performance * avaibility * none * 3
Ephimeral node means: * if the creator of this node (host) fails, znodes is deleted * all the children of it are deleted * after some time are deleted * 1
What you have to check if u want to put an x-lock? * Whatever is doing the node before you * The X-lock before you * The S-lock before you * 1
What you have to check if u want to put an s-lock? * Whatever is doing the node before you * The X-lock before you * The S-lock before you * 2
In Zookeeper, how is a write performed? * directly write to leader * write to a node, node will ask leader to add the write and give ack only when the leader say that the write propagation is done * write to a node, node will propagate to everyone and then ack * 2
What is the key inspiration behind the design of Apache Zookeeper? * The implementation of the NFS filesystem * The need for order and sequencing in data processing * The coordination of distributed applications * 1
Which data structure does Apache Zookeeper primarily utilize for organization? * Trees * Graphs * Hashmaps * 1
How is the leader elected in Apache Zookeeper? * By proposing oneself as a candidate * By consensus of a majority of servers * By monitoring changes in the system * 1
What does the 'Sequence' flag ensure in the Apache Zookeeper data model? * Append a counter to data * Monitor leader changes * Maintain consistency across servers * 1
How is the update committed in Apache Zookeeper? * When all servers have saved the change * When a majority of servers have saved the change * When the leader has approved the change * 2
What was Google's desired approach to transaction processing? * External consistency * Internal consistency * Sequential consistency * 1
What is the main problem with the exclusive lock approach in a large system? * It allows only one read operation at a time * It prevents any other operations while writing * It slows down the system significantly * 2
What is the key feature required for tracking historical data in the system? * Low latency clocks * Super-precise clocks * Atomic clocks * 2
What does the TrueTime.now() function return in the Google Spanner system? * A single timestamp value * An interval between earliest and latest times * The average time across all datacenters * 2
What information is extracted after repeated measurement in the Spanner system? * Statistical averages * Time offset and round-trip delay * Error intervals * 2
What is the purpose of the algorithm used to weed out inaccurate time masters in the Spanner system? * To identify the most consistent time interval * To calculate the average time across all intervals * To prevent delays in the system * 1
What was the primary issue with utilizing Paxos for every update in Google's distributed datacenters? * High network latency * Overloading of servers * Inefficiency in processing updates * 1
After the clock is synchronized, the uncertainty grows according to: * best-case assumptions on computers’ clock drift * worst-case ones * exponential growth * 2
How is the clock drift handled? * Doesn't matter because freq(clock drift) << freq(cpu fails) * Using atomic clocks * re-sync every 30 seconds. The first one is when clocks broke down * 3
In the TrueTime example, what happens during a network congestion? * spikes in red part * 99.9 percentile threshold decreases * 99.9 percentile threshold increases * 3
What is the key feature of the data model used in GoogleCS? * Hierarchical storage * Key-value store * Relational database * 2
How are conflicting transactions handled in GoogleCS? * They are executed in parallel * They are assigned timestamps based on their completion * They are given disjoint locking intervals * 3
What is the purpose of using TrueTime in GoogleCS for assigning timestamps? * To prevent transaction errors * To ensure faster processing of transactions * To handle uncertainty in the clock * 3
How are non-conflicting transactions timestamped in GoogleCS? * Based on their completion time * Based on their start time * Based on their order of execution * 2
What is the role of Paxos in GoogleCS's operation? * Assigning timestamps to transactions * Handling intercontinental consensus * Managing data conflicts * 2
What determines the timestamp used for assigning writes in GoogleCS? * The moment of transaction completion * The moment of lock acquisition * The moment of transaction initiation * 2
How does GoogleCS handle large clock uncertainty in relation to transaction length? * It slows down transaction processing * It increases the system's processing speed * It extends the transaction length * 1
What does λ represent in the context of the M/M/1 queue model? * Arrival rate of jobs * Service rate of the server * Time spent in the queue * 1
What is the condition for the queue to be in equilibrium in the M/M/1 model? * λ > μ * λ < μ * λ = μ * 2
What does Little's Law in the M/M/1 model define? * The average time spent in the queue * The average queue length * The probability distribution of jobs * 1
What is the average time spent in the system for an M/M/1 FIFO queue according to the provided text? * λ * (1 - λ) * 1/(1 - λ) * 3
What is the key property of the M/M/1 queue model as described in the text? * Jobs arrive and are served in a memoryless fashion * Jobs are served based on their priority * Jobs are served sequentially * 1
According to Little's Law, what does L represent in the context of the M/M/1 model? * Average time spent in the system * Average queue length * Arrival rate of jobs * 2
What is the average time spent in the system for an M/M/1 FIFO queue when the arrival rate (λ) is 0.5? * 1 * 2 * 0.5 * 2
Leave when (wait till) TT.now().earliest > ? * TT.now().latest chosen at lock acquisition * ts * they're equal * 3
Avg length of the queue is? * 1/(1-λ) * λ/(1-λ) * (1-λ)^x * 2
In queueing, if λ = 0.9 i have * 9 jobs before me * w = 10 * both are related * 3
In a multi-server system, what is the potential advantage of assigning jobs to the least loaded server? * Better load balancing * Faster processing * Reduced latency * 1
According to Mitzenmacher's findings, what happens to the fraction of queues with at least I jobs when only a small number of servers are queried? * It increases * It decreases * It remains constant * 2
What is a characteristic of preemptive policies in a system with a mix of small and large jobs? * Prioritization of small jobs * Random processing order * No interruption of running jobs * 1
Which scheduling technique can minimize the average time spent on processing in a system where job sizes are known? * FIFO * Shortest Remaining Processing Time (SRPT) * Round-robin scheduling * 2
What potential issue may arise if job size information is incorrect in the SRPT scheduling policy? * System blocking * Increased processing time * Data corruption * 1
What is a drawback of relying solely on mathematical models for evaluating distributed systems? * Inability to identify real-world problems * Lack of precision * Overemphasis on implementation * 2
What is one advantage of conducting experiments and measurements on real systems for evaluation purposes? * Lower costs * Scalability * Detailed insights * 3
Which evaluation method allows for scalable and cost-effective analysis of distributed systems? * Experiments * Simulations * Mathematical models * 2
What technique can be used to schedule tasks in a system with multiple servers, prioritizing machines with the fewest jobs in queue? * FIFO * Preemption * Supermarket technique * 3
When estimating job sizes, what is the suggested approach to avoid potential system blockage due to incorrect information? * Prioritize large jobs * Prioritize small jobs * Balance job sizes * 2
How can we proove that SRPT is better? * By prooving that I can always improve something different * Mathematically * By prooving that there's no starvation * 1
If I have C0 and C1 as completed times of P0 and P1, what's W roughly? * No point in computing it * I sum the two contributions and I divide by 2 * (C1 - C0) / 2 * 2
What is the main objective of Erasure Coding in a distributed computing system? * Minimizing data loss * Maximizing data redundancy * Reducing storage costs * 3
How does the Trivial Solution of data replication work in safeguarding against server failures? * Creating extra data copies * Applying XOR operations * Utilizing linear equations * 1
In the most basic scenario, what's the calculated redundancy with M=2? * 0.5 * 3 * 2 * 2
What is the redundancy value in a scenario with N=6 and M=1, using the general Parity technique? * 0.5 * 1 * 1.2 * 3
What is the redundancy value in a scenario with N=6 and M=2, using the linear oversampling technique? * 0.5 * 1.5 * 1.2 * 2
What do any K distinct points represent in the Polynomial Oversampling technique? * A single polynomial of degree K-1 * Multiple linear equations * Data encryption keys * 1
In the context of Polynomial Oversampling, what happens to the size of the numbers in the encoded message compared to the original data? * They remain the same * They decrease, can lead to underflow * They become larger, can lead to overflow * 3
What are: Associativity, Commutativity, Additive/Multiplicative identity, Distributivity, Add/Mult inverses? * properties of general fields * properties of galois fields * properties of inverse modulo fields * 1
Why Finite fields are cool? * Because they have associative properties * because they're finite * for log2(n) encoding * 3
What is the outcome when computing the multiplicative inverse in a modulo p finite field? * A unique value for each element * No multiplicative inverse * Multiple inverse values * 1
What does the multiplication table modulo m represent in the context of finite fields? * Addition and subtraction rules * Division operations * Multiplication and division operations * 3
What is the reason behind the proof that there is exactly one multiplicative inverse in modulo p? * Prime numbers properties * Multiplicative identity * Field distribution rules * 1
What can I do in Erasure Coding if the encoded msg gets bigger when multiplying? * truncate * fields * Galois fields * 3
Given c0 + c1x + c2x^2 + c3x^3 (mod 7) and f(0)=3, f(2)=1 I have: * c0=3, 1 = 3 + 2c1 + 4c2 + 8c3 * c0=3, 1 = 3 + 2c1 + 4c2 + c3 * c0=3, 1 = 3 + 2c1 + 4c2 * 2
Given 5c1 + 6c2 = 0... * 5c1 = -6c2 -> 5c1 = c2 -> (mult by inv both sides) c1 = 2c2 * 5c1 = -6c2 -> 5c1 = c2 -> (mult by inv both sides) c1 = c2 * 5c1 = -6c2 -> 5c1 = c2 -> (mult by inv both sides) c1 = 3c2 * 3
In practical scenarios, how is data treated for storage across multiple machines? * Divided in a sequence of K blocks, encoded in series of values smaller than p  * All elements of the first (original) block will be c0 coefficients and so on * both * 3
Complete the ?: N is |machines|, M is |?|, choose p, divide in ?, encode as ?, encode again and put all the ? and so on * tolerable failures, K blocks of same size, series of values < p, y0 coeff in the fst block * tolerable failures, K blocks of same size, series of values < p, c0 coeff in the fst block * both * 1
What is recommended regarding the choice of p in the encoding process? * Choose p to be smaller than N * Ensure p is not smaller than N * Set p equal to M * 2
In coding theory, what are the finite fields typically used by computer professionals? * Fields with 2^m elements * Fields with p^m elements, where m ≥ 1 * Fields with m elements * 1
What is a characteristic feature of fountain codes in comparison to other coding approaches? * They require a fixed number of redundant blocks * They do not need a predetermined N to function * They operate efficiently for small data sets * 2
What is the key advantage of regenerating codes in data recovery scenarios? * They require the original plain-text to recreate lost blocks * They can regenerate lost blocks without external information * They ensure the integrity of the original data * 2
What is the purpose of padding in the encoding process? * To reduce the number of coefficients * To ensure the number of values is a multiple of K * To adjust the size of the data blocks * 2
What is the approximate space requirement for the storage and reconstruction of 100 GB of data using advanced theory? * A bit more than 100 GB * Less than 100 GB * Exactly 100 GB * 1
What was the original purpose of the Tor project when it was initially funded by the US government? * Protecting intelligence communication online * Facilitating secure online transactions * Ensuring freedom of speech on the internet * 1
What is a key security assumption for the effective use of the Tor network? * All routers should be owned by the same entity * Attackers have access to all traffic from both guard and exit nodes * Routers can decrypt messages peeling one layer * 3
Which is the riskiest node in Tor? * Starting Node * Exit Node * both * 2
What are the Security Assumptions in Tor? * All routers choose shouldn't be owned by the same attacker * Attacker can't see your traffic from both guard and exit nodes * both * 3
What security protocol does Tor use for encapsulating TCP connections? * UDP * TCP * SOCKS * 3
Why is using BitTorrent over Tor not recommended? * BitTorrent uses UDP connections (all the Tor work isn't worthy bcs one UDP packet isn't reliable) * BitTorrent requires specialized hardware that Tor doesn't support * It can expose user data to potential attackers * 1
Why is using Tor on an everyday browser not recommended? * It doesn't support certain types of data transmission * It can lead to correlation of website visits through cookies and fingerprints * It hinders access to specific websites * 2
How is the Tor Browser designed to prevent tracking and correlation of user activities? * It uses advanced encryption algorithms * It blocks all cookies and website data * It is designed to look identical for all users and always operates through the proxy * 3
What is the main purpose of bridges in the Tor network? * Bridges are used to control the traffic flow within the network * Bridges prevent unauthorized access to the Tor network * Bridges allow people to access Tor nodes in countries where they are blocked * 3