What is the definition of modeling in a general sense? * A visual representation of something for something * A mathematical representation of something for something * both * 3
In modeling, what is the purpose of creating a representation of a concept, system, or structure? * To create a blueprint for construction * To facilitate understanding and analysis * To generate automatic artifacts * 2
What is the significance of modeling "to-be" in software development? * It provides a visual representation of the current state * It allows analysis before building anything * It focuses on documentation and understanding * 2
What can be automatically generated from models in software development? * Code * Concepts * Blueprints * 1
What distinguishes a notation from a language in the context of modeling? * Precision level * Structured or natural language * Supporting software tools * 1
How do modeling notations differ in terms of standardization? * All modeling notations are standardized * Some modeling notations are * Modeling notations are not standardized * 2
What does UML stand for in the context of software modeling? * Unified Modelling Language * Universal Modeling Logic * Uniform Model Language * 1
Which of the following is a key feature of UML? * Visual sub-notations only * Textual sub-notations only * Integrated notations * 3
What is the primary advantage of UML being adaptable to specific contexts? * It reduces the number of diagrams needed * It allows for more precise modeling * It ensures general-purpose usage * 2
How many different types of UML diagrams are commonly used in software development? * 4 * 14 * 49 * 2
What is one challenge associated with UML's complexity? * Lack of supporting tools * Lack of integrated notations * Unclear semantics * 3
Which UML version significantly improved semantics? * Version 1.0 * Version 2.0 * Version 2.5.1 * 3
What characteristic must a requirement possess to be considered fundamental? * Complete * Verifiable * Unambiguous * 2
Which type of requirements describe the functions that software is expected to perform? * Functional requirements * Usability requirements * Regulatory requirements * 1
What does ISO 9241-11 define as usability? * The ease of access * The extent to which specified users can achieve goals effectively, efficiently, and with satisfaction * The software's responsiveness * 2
In the context of non-functional requirements, what is the significance of verifiability? * It ensures the requirements are user-friendly * It allows for easy testing and measurement * It enhances system security * 2
What's a main category of non-functional requirements? * Product * Behavioral * Operational * 1
What's a main category of non-functional requirements? * Efficiency * Regulatory * External * 3
What's a main category of non-functional requirements? * Dependability * Enviromental * Organizational * 3
How can the usability of a software product be effectively assessed? * By measuring the number of lines of code * Through A/B testing with future users * By evaluating the complexity of the software * 2
Which dimension of dependability relates to the system's ability to adapt to new requirements? * Maintainability * Reliability * Safety * 1
What are the requirements that are related to the context in which a system will be placed called? * Environmental requirements * Contextual requirements * Physical requirements * 1
What do operational requirements typically specify? * The schedule for software development * Hardware specifications * Constraints on how the software will be used * 3
When it comes to unethical or illegal requirements, what action can an analyst/designer take? * Refusing to support them * Complying without question * Ignoring them and proceeding with development * 1
In the context of requirements priority, what does the MoSCoW method help determine? * Requirement relevance * System security * System performance * 1
What is the primary role of a requirement specification document? * Providing a basis for estimating product costs * Describing the software development process * Defining software architecture * 1
Requirements should be: * Complete and Correct * Complete and Consistent * Coherent and Consistent * 2
Non functional req are also termed as: * constraints * capabilities * features * 1
Performance requirements put constraints on: * latency * throughput * both * 3
Why Space requirements (old fashioned) are back? * Moore Law * IoT and Pay per use * High performance Computing * 2
Which dependability req. is missing in: Maintainab, Avaib, Reliab, Safety, Err Tol? * Security * Repairability * Redundancy * 2
Which isn't an Operational req? * uneven distribution of user accesses * conflicting roles for single user * user groups conflicting * 3  
In the context of design, what is the primary role of abstract design? * Roof construction * Bridging the gap from problems to solutions * Executable models * 2
When discussing design as a noun, what does it refer to? * Development processes * Architectural components * The result of the design process * 3
Why is early-stage design important in software development? * To estimate costs and resources * To focus on individual components * To avoid communication with stakeholders * 1
What makes errors in software development more expensive to fix? * The use of reusable concepts * The involvement of stakeholders * The advancement of development stages * 3
In the context of design, what does "divide et impera problem" refer to? * A specific design methodology * Neglecting the contribution of subsystems to the overall system * A pattern for component reuse * 2
When should the design process take place? * Only in the early stages of development * At any point in the development process * After implementation * 2
What is the primary input for the design process? * Stakeholder communication * Domain-specific terms * Requirements * 3
What is the primary output of the design process? * Detailed software code * A model of the system or solution * Project management plans * 2
Why is memory and communication considered essential in software development? * To enhance creativity within the team * To support the aloof geniuses * To facilitate team collaboration and knowledge transfer * 3
What purpose do design methods serve in software development? * To promote blank canvas panic * To avoid predictable development * To provide structure and guidance in the design process * 3
What role do well-established pieces of solutions, such as patterns and tactics, play in software design? * They are used to create novel, unique designs * They contribute to blank canvas panic * They aid designers in making choices and improving proficiency * 3
You're doing great! * right * wrong * wrong * 1
Is all design an architecture? * Yes * No, there's no set inclusion * No, but all architecture is design * 3
Which is the stopping rule for architectural design? * when project manager decides * when customers decide * there's no specific criterion * 3
The definition fundamental <concepts of properties of a sys in its env; embodied in its elements, relationships, and in the principles of its design and evolution> is: * system * architecture * could be both * 2
Stakeholder's interests are also in general called: * concerns * purpose * mission * 1
The relation between System and Architecture in the first seen diagram is: * 1..n to 1..n * 0..n to 0..n * 0..n to 1..n * 2
The relation between System and Architecture in the second seen diagram is: * 1..1 to 1..1 * 0..1 to 0..1 * 1..n to 1..n * 1
A set of conventions for constructing, interpreting, using and analyzing one type of Architecture View is a: * Architecture Model * Architecture Viewpoint * Model Kind * 2
The perspective of one or more stakeholders on how the architecture address specific concerns is a: * Architecture View * Architecture Viewpoint * Model Kind * 1
Which is the correct order? * Arch. drivers, documentation, design, eval * design, drivers, documentation, eval * drivers, design, documentation, eval * 3
Which of these isn't a design concern: general, specific, internal, external, issues * internal * external * issues * 2
What are solution schemas to be personalized and instantiated for the problem/context * design patterns * architectural patterns * patterns * 3
What is better according to Gang of Four? * interfaces with object composition * interfaces with inheritance * classes with inheritance * 1
The observer design pattern is * behavioural * structural * creational * 1
The intent of defining a 1-N dependency between objects to notify the dependents when one object change state is called * state pattern * observer * factory * 2
In Observer Pattern, who has the attach/detach method * The Observer, together with update * The Subject, together with notify * The Subject, together with update * 2
What does the notify method in Observer Pattern * It loops the attached observers and calls their getState * It loops the attached observers and calls their notify * It loops the attached observers and calls their update * 3
Where is useful, in Observer Pattern, to put a lifespan? * attach * detach * update * 1
What did the Architectural Design section mention about the decision-making process in design? * Every decision has a right or wrong outcome * There is only one best solution for every problem * Solutions may result in different issues elsewhere in the system * 3
What are the main components of design patterns in software development? * Dependencies and interactions * Names and specifications * Abstract classes and objects * 2
In which situation is the Observer design pattern most applicable? * When multiple objects need to be changed * When an object requires notifications * When an object changes state * 1
What does the Observer design pattern primarily ensure in the relationship between subjects and observers? * Independency between subject and observers * Limited extension for observers * Direct subject-observer relationships * 1
How can the Observer pattern implementation avoid observer-specific update protocols? * By using dangling references * By using explicit modifications * By applying push and pull models * 3
What is a potential disadvantage of the Observer pattern implementation? * Limited customization * Unexpected updates * Minimal update overhead * 2
How does the push/pull model address the issues associated with the push model? * By restricting data transmission * By allowing observers to request updates * By simplifying the implementation process * 2
How should the observer pattern be designed to avoid observer-specific update protocols? * By tightly coupling observers with update protocols * By maintaining a fixed update mechanism * By ensuring both flexibility and adaptability * 3
In the context of the observer pattern, what is a key advantage of the push/pull model over the push model? * Improved data transmission efficiency * Reduced implementation complexity * Increased observer control over data * 3
What elements are typically included in an architectural pattern, as mentioned in the text? * Functions, operations, rationale and constraints * Context, forces, rationale and known uses * Components, modules, rationale and examples * 2
Example of vocabulary for Architectural Patterns? * Arch.Styles, but often they're seen with the same abstraction level * Arch.Style, that have always different abstraction level * Arch.Styles, with lower abstraction level * 1
What is the primary purpose of the Pipe and Filters architectural pattern/style? * Stream/asynchronous processing of data * Efficient resource utilization * Complex data manipulation * 1
What are some advantages associated with the Pipe and Filters architectural style? * High coupling and low reusability * Consistent data processing overhead * Replaceable filters and reusable black boxes * 3
What challenges are associated with the Pipe and Filters architectural style? * Increased processing speed * Enhanced data management * Potential flooding and starvation * 3
How can be the Pipe and Filters pattern implemented in practice? * Through a circular pipe and filter design * Using a linear pipe and filter structure * Through a hierarchical pipe and filter system * 2
What does the Resulting Context element of an architectural pattern describe, based on the information provided in the text? * The specific implementation details * The characteristics of the external environment * The post-conditions after the pattern has been applied * 3
What is the rationale in architectural patterns? * The justification of the pattern * The document with details of the pattern * The relationships with other patterns * 1
What is a critical aspect described in the Forces element of an architectural pattern? * The specific functionalities and features * The optimization criteria for the architecture * The mutual interaction within forces and the one between them and goals * 3
Which statement accurately captures Martin Fowler's perspective on the MVC pattern? * Diverse interpretations of MVC lead to misunderstandings and confusion. * MVC is a well-defined pattern with minimal variability. * MVC's origins are rooted in the principles of Smalltalk programming. * 1
What primary problem is addressed in the context of MVC? * Variability in application interfaces * Challenges in ensuring data consistency * Difficulties in managing different development environments * 1
What critical role does the Controller component play within the MVC pattern? * Providing the user with relevant views * Linking the application with the user * Arranging the representation of the model * 3
What key function does the Model serve in MVC? * Representing the owner's perception of the application * Highlighting certain attributes and suppressing others * Providing the user with input and output * 1
In MVC who: translate user output into msgs / arrange views in the screen / represent knowledge / highlight attributes of the M / it's objects and not raw data / asks questions to the M * CCVVMV  * CCMVMV * CMMVMV * 2 
What's the MVC solution key idea? * Decoupling data access and business logic from UI * data access + business logic = domain model (one model + several UI) * both * 3
Why the Observer Pattern applied to MVC isn't exactly an Observer? * bcs there are multiple notifies * bcs there's a refresh from Controller Observer to View Observer * because there're different behavior of updates in the two Observers * 2
In MVC how can i reuse interfaces and allow people with different skills to work independently? * building UI in layers * couple all View with Model * couple all View with Controller * 1
If A passes calls to B, B manipulates C and C fires events to A, is: * MVC * MVP * none * 1 
If A passes calls to B that updates A, and B manipulates C that fires events to B, is: * MVC * MVP * none * 2
If A passes calls to B, B manipulates A and C fires events to A, is: * MVC * MVP * none * 3
In MVC what are: distribution over a network is simplified, BL bleeds into Controller, excessive coupling between M&V and M&C * MVC pros * MVC consequences * MVC cons * 2
In MVC: if M is data, V is item visual, C is event-handlers * it's MVC as design pattern * it's MVC as architectural pattern * none * 1
In MVC: if M is domain model, V is UI output, C is UI input * it's MVC as design pattern * it's MVC as architectural pattern * none * 2
What is a crucial challenge solved in the MVP variant of the MVC pattern? * Complicated view implementation * Tight coupling between the View and Model * Insufficient user interaction with the Presenter * 2
According to the information provided, what approach is used to enhance the testability of the MVP pattern? * Data binding between View and Presenter * Dependency injection for the View interface * Direct interaction between the View and Model * 2
Is it true that in MVC type models the Business Logic resides in the Model? * Yes, always * Yes, but in pure MVC the C has to know some BL to select the proper interface * No * 2
In MVVM is it always true that the VM has to handle data for its representation? * Yes, there's no direct communication between V and M * No, if the representation is 100% equal from the Model, the Modell will do * Depends * 2
What's a practical solution to handle data related to user interface interactions in ViewModel? * Introduction of complex data synchronization mechanisms * Hooking the view model to the application core * View delegates specific operations to the View Model via events * 3
What is the primary goal of deployment patterns? * Streamlining hardware availability * Meeting legal constraints * Focusing onto physical distribution of SW * 3
What constraints to take into account for Deployment Patterns? * hardware performance and operative costs * hardware availability and operative costs * hardware availability and deployment costs * 2
What to do in Deployment Patterns if I have to take into account server maximum load and physical performance, and single point of failure? * adding an extra node called load balancer * adding more single point of failures * improving algorithms * 1
What unsolved issue is associated with the load balancer in deployment pattern? * load balancing algorithm choice * Session management complexity * Shifting up the single point of failure problem * 3
What connection is highlighted between the Layered Logical Structure and the Layered Physical Structure, as discussed in the material? * Logical distribution improves physical separation * Logical structure enables same name deployment pattern * Physical structure fosters scalability and maintainability * 2
What are the two faces of many distribution patterns (like the many tiers one)? * layered logical structure and layered physical structure * architectural and deployment pattern * both of them * 3
When is a use of use cases in the requirement specification process deemed unsuitable? * When dealing with hardware systems, black boxes or data reqs * When software is the main focus * When there are no human actors, I have black boxes or data reqs * 3
What is the key emphasis of the Goal-Oriented Requirement Specification method? * How the system should operate * What the system should achieve * Which actors are involved * 2
What is the recommended approach to refining abstract goals into concrete requirements? * And-way and Or-way * Division and Multiplication * Addition and Subtraction * 1
What is the key outcome of goal elicitation in the Goal-Oriented Requirement Specification process? * Establishing a sound set of goals * Identifying conflicts between goals * Determining the domain entities * 1
What are the three types of goals defined in the GoReq method? * Logical, Operational, Non-functional * Strategic, Logical, Verifiable * Strategic, Operative, Non-functional * 3
How are strategic goals represented in the UML notation in the GoReq method? * As rectangles with a thick line * As ovals with a thick line * As triangles with a thin line * 2
What is the purpose of using a UML profile in the GoReq method? * Enhanced visualization * Standard documentation * Improved data storage * 1
What is the primary function of a Goal View in the GoReq method? * Structured table of contents * System development guide * Requirement specification document * 3
How can a goal be described in the Goal Specification process? * Through natural language only * Using UML over the domain model * With a combination of natural language and UML * 3
What is the main characteristic of an operative goal in the context of the GoReq method? * High-level abstraction * Verifiability and realizability * Direct association with users * 2
How does the GoReq method propose to handle the specification of non-functional goals? * extending/modifying/annotating the specification of the operative goals that extend * by additional UML diagrams * both * 3
In the context of UML, what role does the Composite Structure Diagram serve? * It showcases the collaboration between classes * It details the internal structure of multiple classes * It highlights the interactions among interfaces * 2
How is a connector defined in the context of a Composite Structure Diagram? * It links two classes * It connects parts or roles of a structured class * It defines the relationships among interfaces * 2
What is the main function of a port in the context of a structured class? * To facilitate internal communication * To define internal constituents * To enable communication with the environment * 3
What is the purpose of the delegation feature in the context of structured classes? * For communication between class ports and part/role ones * To establish connections between connectors * To enable interactions between parts and roles * 1
What's the subtle difference between association and connector? * 1 for Class Diagram, 2 for CS Diagram * 1 can be only logical * 2 isn't dashed * 2
What's the difference between parts (filled line rectangle) and roles (dashed) in CS Diagram? * Interface vs Class * Composition vs Aggregation * Internal vs External * 2
What is the relationship between the ports of a part and the ports of the enclosed parts/roles in a structured class? * Complementary * Parallel * Isolated * 1
What does the lollipop notation represent in the context of UML? * Parts within a structured class * Connections between ports * Offered and required interfaces * 3
What realizes the Offered <<interface>> and <<uses>> the Required <<interface>>? * PortType * Port * PortInterface * 1
How is a tactic structured? * A tree with root as a quality attribute * A tree with leaves the possible decisions to improve that non-funct. req * both * 3
What is an action or strategy carefully planned to achieve a specific end * Quality attribute * Tactic * Goal * 2
What embodies experience as decisions? (opposite to patterns, embodying schematic solutions) * Design Patterns * Goals * Tactics * 3
What are differences between tactics and patterns? * no trade-offs in tactics * context/problem/other design concepts * both * 3
What's the only true sentence? * Patterns won't capture any tactic * some tactic cannot be expressed by patterns * all tactics can be expressed by patterns * 2
What is the main purpose of a Deployment diagram in UML? * Defining the execution architecture of systems * Describing user interactions * Organizing system requirements * 1
What are the primary components of a Deployment diagram? * (Deployed) Targets and Artifacts * Devices and Execution Environments * both * 3
What is the function of Nodes, more precise elements than deployed target, in a Deployment diagram? * Representing user interfaces * Depicting system artifacts * Representing software execution environments or other sub-types * 3
How can I express <<artifact>> --> target (parallelepipeds)? * Depicting artifact inside target * Connecting with dependencies optionally stereotyped by <<deploy>> * both * 3
What is the primary function of a Reference Architecture in software design? * Providing a blueprint for software structures * Ensuring efficient project management * Enforcing coding standards * 1
When is a Rich Internet Application most suitable for use? * When the rich UI must run inside a browser * When frequent Internet access is not necessary * When limited local resource access is acceptable * 1
What is a key limitation of Rich Internet Applications? * Unreliable application deployment * Unavailability of plug-in execution environments * Processing in client side * 2
What is a critical consideration for Mobile Applications in terms of resources? * Limited access to local resources * High dependence on a reliable Internet connection * Continuous access to a plug-in execution environment * 1
What type of application deployment scenario requires the application to run both online and offline? * Mobile application * Rich client application * Web application * 1
A reference architecture is: info that provides a set of architectural best practices OR about a specific subject area that guides and constrains the instantiations of multiple architectures and solutions OR about industry best practices f.e specific technologies * defs by, in order: DOD, RUP by IBM, HP * RUP by IBM, DOD, HP * HP, DOD, RUP by IBM * 2
Suitable when rich UI not required, no install on client, portable UI, Internet required, client-side resource use should be low? * Web app * Rich Internet App * Rich client App * 1
Suitable when rich UI needed but must run inside a browser, some processing on client side, no-install easy deploy BUT limited access to local resources, loading time non-negligible, Plug-in execution environment may be not available in some platform * Web app * Rich Internet App * Rich client App * 2
Suitable when want deploy the application on users’ machines, intermittent or no Internet, want highly interactive and responsible app, want to leverage the users machine resources * Rich Internet App * Rich client App * Mob App * 2
Suitable when want connectivity is unreliable (online and offline randomly) BUT Resources may be limited * Rich Internet App * Rich client App * Mob App * 3
Which term is used to describe a self-contained piece of software that provides specific functionalities and can be integrated into a designed system with minimal coding? * Software artifact * Software framework * Software product * 3
What distinguishes a software framework from other library forms? * Default behavior and control * Customizable user code * Modifiable framework code * 1
What is a consideration when selecting a proper externally developed component? * Type of license and Cost * Code complexity and Learning Curve * Popularity and Project requirements * 1
What term is used to describe a software abstraction providing generic functionalities that can be changed by additional user-written code? * Software artifact * Software framework * Software library * 2
What makes a framework different from other library forms? * Inversion of control * Modifiable code * User-specific functionalities * 1
What are the hidden cons of using frameworks in software development? * Expert requirement and evolution issues * Too freedom in architectural choices * Reduced development effort * 1
What is the primary purpose of a Service Level Agreement (SLA)? * Describing the service's functionality * Outlining the service provider's responsibilities * Defining the service user's expectations * 3
What type of web service emphasizes addressing and transferring resource states over HTTP with a focus on system resources? * SOAP Web Service * RESTful web service * XML web service * 2
What does the term "Collaboration" refer to in the context of service composition? * Participants interacting in a predefined pattern * Participants interacting without a predefined pattern * A particular participant overseeing service interactions * 2
What does the term "Choreography" indicate in the context of service composition? * Participants following a predefined pattern of behavior * Participants interacting in a non-controlled fashion * A participant overseeing and directing other services * 1
What is the purpose of a Service Registry? * To automate tasks * To detect services on a computer network * To help consumers find and use services run-time * 3
What does the term "Service interface" define, according to the given information? * The terms and conditions of service usage * The mechanism for interacting with a service * The relationship between service users and providers * 2
What is the primary purpose of a Service Contract between a service provider and user? * defines the terms, conditions, and interaction rules that any participant must agree to * Establishing the service functionality * Defining the service's Quality of Service * 1
What defines Platform-as-a-Service (PaaS)? * Cloud-based application hosting * Hardware configuration service * Resource attributes for cloud services * 1
How is Software-as-a-Service (SaaS) defined in the context of cloud computing? * Cloud-based application development * Third-party software distribution model * Business intelligence delivery model * 2
What does Infrastructure-as-a-Service (IaaS) primarily offer? * Cloud-based application hosting * Business intelligence services * Functional and resource attributes * 3
What is the primary focus of an Enterprise Service Bus in the context of Service-Oriented Architecture (SOA)? * Hosting applications * Exercising control over services * Implementing communication systems between services * 3
What defines the concept of SOA Governance as outlined in the text? * Exercising control over services * Creating fundamental software structures * Documenting software architectures * 1
What is the fundamental principle of a Business Service in the context of Service-Oriented Architecture (SOA)? * Supporting IT infrastructure * Completing specific business functions * Ensuring the integrity of the system * 2
What differentiates Microservices Architecture (MSA) from traditional SOA? * Usage of complex products for choreography * Full decoupling and independence of services * Centralized control of service interfaces * 2
What does the operational systems layer primarily encompass in the context of SOA? * Service description and runtime contracts * Business process orchestration * Infrastructure required to support SOA * 3
What is the key responsibility of the service component layer in the SOA reference architecture? * End user capability provisioning * Linking the service contract to its implementation * Middleware view and classification of services * 2
Which layer is specifically dedicated to service composition and orchestration within the SOA reference architecture? * Operational systems layer * Service component layer * Business process layer * 3
Remember that non functional reqs types, UML diagrams details and some services types ARE NOT fully part of this app * I understand and I will deepen my knowledge in that topics * Why are you telling me, I'm not dumb * ChatGPT is better than you * 1
What's the missing ADD Driver in: Design objectives, Primary funct reqs, .., Constraint, (other) Concerns * Tactics * Quality attributes * Patterns * 2
Which are correct ADD stmts? * Design Drivers -> Round -> Refined sw architecture deisgn * Design Drivers -> 1.Review inputs -> Iteration -> Refined sw architecture deisgn * both * 3
Which is the missing ADD Iteration Step: 2) Estabilish iteration goal by selecting drivers, 3) .., 4) Choose one or more deisgn concepts * Sketch views and record design decisions * Perforn analysis of current design and review iteration goal and deisgn objectives * Choose 1+ elements to decompose * 3
Which is the missing ADD Iteration Step: 5) Instantiate architectural elements, allocate responsibilities and define interfaces, 6) Sketch views and record design decisions, 7) .. * Perforn analysis of current design and review iteration goal and deisgn objectives * Estabilish iteration goal by selecting drivers * Choose 1+ elements to decompose * 1
What does determine a high priority? Value, Cost, Risk, Difficulty of Implementation, Likelihood of Success, Regulatory Compliance, Stakeholder Agreement, Urgency and? * Enviroment * ROI * Relationship with other requirements * 3
Which popular method for requirements prioritization utilizes a ranking system? * MoSCoW method or two-dim matrix business importance X technical risk * Voting mechanisms * Bubble Sort Technique (total order, suitable for small number of reqs) * 1
What does the "Must have, Should have, Could have, Won't have (this time)" framework represent in the context of requirements prioritization? * A more natural-language way to rakn by a given metric * Business relevance assessment * Stakeholder collaboration method * 1
Which method for requirements prioritization involves distributing virtual dollars among different requirements? * Ranking w.r.t. a given metric * Bubble Sort Technique * Voting mechanisms * 3