What is the definition of modeling in a general sense? * A visual representation of something for something * A mathematical representation of something for something * both * 3
In modeling, what is the purpose of creating a representation of a concept, system, or structure? * To create a blueprint for construction * To facilitate understanding and analysis * To generate automatic artifacts * 2
What is the significance of modeling "to-be" in software development? * It provides a visual representation of the current state * It allows analysis before building anything * It focuses on documentation and understanding * 2
What can be automatically generated from models in software development? * Code * Concepts * Blueprints * 1
What distinguishes a notation from a language in the context of modeling? * Precision level * Structured or natural language * Supporting software tools * 1
How do modeling notations differ in terms of standardization? * All modeling notations are standardized * Some modeling notations are * Modeling notations are not standardized * 2
What does UML stand for in the context of software modeling? * Unified Modelling Language * Universal Modeling Logic * Uniform Model Language * 1
Which of the following is a key feature of UML? * Visual sub-notations only * Textual sub-notations only * Integrated notations * 3
What is the primary advantage of UML being adaptable to specific contexts? * It reduces the number of diagrams needed * It allows for more precise modeling * It ensures general-purpose usage * 2
How many different types of UML diagrams are commonly used in software development? * 4 * 14 * 49 * 2
What is one challenge associated with UML's complexity? * Lack of supporting tools * Lack of integrated notations * Unclear semantics * 3
Which UML version significantly improved semantics? * Version 1.0 * Version 2.0 * Version 2.5.1 * 3
What characteristic must a requirement possess to be considered fundamental? * Complete * Verifiable * Unambiguous * 2
Which type of requirements describe the functions that software is expected to perform? * Functional requirements * Usability requirements * Regulatory requirements * 1
What does ISO 9241-11 define as usability? * The ease of access * The extent to which specified users can achieve goals effectively, efficiently, and with satisfaction * The software's responsiveness * 2
In the context of non-functional requirements, what is the significance of verifiability? * It ensures the requirements are user-friendly * It allows for easy testing and measurement * It enhances system security * 2
What's a main category of non-functional requirements? * Product * Behavioral * Operational * 1
What's a main category of non-functional requirements? * Efficiency * Regulatory * External * 3
What's a main category of non-functional requirements? * Dependability * Enviromental * Organizational * 3
How can the usability of a software product be effectively assessed? * By measuring the number of lines of code * Through A/B testing with future users * By evaluating the complexity of the software * 2
Which dimension of dependability relates to the system's ability to adapt to new requirements? * Maintainability * Reliability * Safety * 1
What are the requirements that are related to the context in which a system will be placed called? * Environmental requirements * Contextual requirements * Physical requirements * 1
What do operational requirements typically specify? * The schedule for software development * Hardware specifications * Constraints on how the software will be used * 3
When it comes to unethical or illegal requirements, what action can an analyst/designer take? * Refusing to support them * Complying without question * Ignoring them and proceeding with development * 1
In the context of requirements priority, what does the MoSCoW method help determine? * Requirement relevance * System security * System performance * 1
What is the primary role of a requirement specification document? * Providing a basis for estimating product costs * Describing the software development process * Defining software architecture * 1
Requirements should be: * Complete and Correct * Complete and Consistent * Coherent and Consistent * 2
Non functional req are also termed as: * constraints * capabilities * features * 1
Performance requirements put constraints on: * latency * throughput * both * 3
Why Space requirements (old fashioned) are back? * Moore Law * IoT and Pay per use * High performance Computing * 2
Which dependability req. is missing in: Maintainab, Avaib, Reliab, Safety, Err Tol? * Security * Repairability * Redundancy * 2
Which isn't an Operational req? * uneven distribution of user accesses * conflicting roles for single user * user groups conflicting * 3  
In the context of design, what is the primary role of abstract design? * Roof construction * Bridging the gap from problems to solutions * Executable models * 2
When discussing design as a noun, what does it refer to? * Development processes * Architectural components * The result of the design process * 3
Why is early-stage design important in software development? * To estimate costs and resources * To focus on individual components * To avoid communication with stakeholders * 1
What makes errors in software development more expensive to fix? * The use of reusable concepts * The involvement of stakeholders * The advancement of development stages * 3
In the context of design, what does "divide et impera problem" refer to? * A specific design methodology * Neglecting the contribution of subsystems to the overall system * A pattern for component reuse * 2
When should the design process take place? * Only in the early stages of development * At any point in the development process * After implementation * 2
What is the primary input for the design process? * Stakeholder communication * Domain-specific terms * Requirements * 3
What is the primary output of the design process? * Detailed software code * A model of the system or solution * Project management plans * 2
Why is memory and communication considered essential in software development? * To enhance creativity within the team * To support the aloof geniuses * To facilitate team collaboration and knowledge transfer * 3
What purpose do design methods serve in software development? * To promote blank canvas panic * To avoid predictable development * To provide structure and guidance in the design process * 3
What role do well-established pieces of solutions, such as patterns and tactics, play in software design? * They are used to create novel, unique designs * They contribute to blank canvas panic * They aid designers in making choices and improving proficiency * 3
You're doing great! * right * wrong * wrong * 1
Is all design an architecture? * Yes * No, there's no set inclusion * No, but all architecture is design * 3
Which is the stopping rule for architectural design? * when project manager decides * when customers decide * there's no specific criterion * 3
The definition fundamental <concepts of properties of a sys in its env; embodied in its elements, relationships, and in the principles of its design and evolution> is: * system * architecture * could be both * 2
Stakeholder's interests are also in general called: * concerns * purpose * mission * 1
The relation between System and Architecture in the first seen diagram is: * 1..n to 1..n * 0..n to 0..n * 0..n to 1..n * 2
The relation between System and Architecture in the second seen diagram is: * 1..1 to 1..1 * 0..1 to 0..1 * 1..n to 1..n * 1
A set of conventions for constructing, interpreting, using and analyzing one type of Architecture View is a: * Architecture Model * Architecture Viewpoint * Model Kind * 2
The perspective of one or more stakeholders on how the architecture address specific concerns is a: * Architecture View * Architecture Viewpoint * Model Kind * 1
Which is the correct order? * Arch. drivers, documentation, design, eval * design, drivers, documentation, eval * drivers, design, documentation, eval * 3
Which of these isn't a design concern: general, specific, internal, external, issues * internal * external * issues * 2
What are solution schemas to be personalized and instantiated for the problem/context * design patterns * architectural patterns * patterns * 3
What is better according to Gang of Four? * interfaces with object composition * interfaces with inheritance * classes with inheritance * 1
The observer design pattern is * behavioural * structural * creational * 1
The intent of defining a 1-N dependency between objects to notify the dependents when one object change state is called * state pattern * observer * factory * 2
In Observer Pattern, who has the attach/detach method * The Observer, together with update * The Subject, together with notify * The Subject, together with update * 2
What does the notify method in Observer Pattern * It loops the attached observers and calls their getState * It loops the attached observers and calls their notify * It loops the attached observers and calls their update * 3
Where is useful, in Observer Pattern, to put a lifespan? * attach * detach * update * 1
What did the Architectural Design section mention about the decision-making process in design? * Every decision has a right or wrong outcome * There is only one best solution for every problem * Solutions may result in different issues elsewhere in the system * 3
What are the main components of design patterns in software development? * Dependencies and interactions * Names and specifications * Abstract classes and objects * 2
In which situation is the Observer design pattern most applicable? * When multiple objects need to be changed * When an object requires notifications * When an object changes state * 1
What does the Observer design pattern primarily ensure in the relationship between subjects and observers? * Independency between subject and observers * Limited extension for observers * Direct subject-observer relationships * 1
How can the Observer pattern implementation avoid observer-specific update protocols? * By using dangling references * By using explicit modifications * By applying push and pull models * 3
What is a potential disadvantage of the Observer pattern implementation? * Limited customization * Unexpected updates * Minimal update overhead * 2
How does the push/pull model address the issues associated with the push model? * By restricting data transmission * By allowing observers to request updates * By simplifying the implementation process * 2
How should the observer pattern be designed to avoid observer-specific update protocols? * By tightly coupling observers with update protocols * By maintaining a fixed update mechanism * By ensuring both flexibility and adaptability * 3
In the context of the observer pattern, what is a key advantage of the push/pull model over the push model? * Improved data transmission efficiency * Reduced implementation complexity * Increased observer control over data * 3
What elements are typically included in an architectural pattern, as mentioned in the text? * Functions, operations, rationale and constraints * Context, forces, rationale and known uses * Components, modules, rationale and examples * 2
Example of vocabulary for Architectural Patterns? * Arch.Styles, but often they're seen with the same abstraction level * Arch.Style, that have always different abstraction level * Arch.Styles, with lower abstraction level * 1
What is the primary purpose of the Pipe and Filters architectural pattern/style? * Stream/asynchronous processing of data * Efficient resource utilization * Complex data manipulation * 1
What are some advantages associated with the Pipe and Filters architectural style? * High coupling and low reusability * Consistent data processing overhead * Replaceable filters and reusable black boxes * 3
What challenges are associated with the Pipe and Filters architectural style? * Increased processing speed * Enhanced data management * Potential flooding and starvation * 3
How can be the Pipe and Filters pattern implemented in practice? * Through a circular pipe and filter design * Using a linear pipe and filter structure * Through a hierarchical pipe and filter system * 2
What does the Resulting Context element of an architectural pattern describe, based on the information provided in the text? * The specific implementation details * The characteristics of the external environment * The post-conditions after the pattern has been applied * 3
What is the rationale in architectural patterns? * The justification of the pattern * The document with details of the pattern * The relationships with other patterns * 1
What is a critical aspect described in the Forces element of an architectural pattern? * The specific functionalities and features * The optimization criteria for the architecture * The mutual interaction within forces and the one between them and goals * 3
Which statement accurately captures Martin Fowler's perspective on the MVC pattern? * Diverse interpretations of MVC lead to misunderstandings and confusion. * MVC is a well-defined pattern with minimal variability. * MVC's origins are rooted in the principles of Smalltalk programming. * 1
What primary problem is addressed in the context of the first problem outlined? * Variability in application interfaces * Challenges in ensuring data consistency * Difficulties in managing different development environments * 1
What critical role does the Controller component play within the MVC pattern, as elucidated in the material? * Providing the user with relevant views * Linking the application with the user * Arranging the representation of the model * 3
What key function does the Model serve in MVC? * Representing the owner's perception of the application * Highlighting certain attributes and suppressing others * Providing the user with input and output * 1
In MVC who: translate user output into msgs / arrange views in the screen / represent knowledge / highlight attributes of the M / it's objects and not raw data / asks questions to the M * CCVVMV  * CCMVMV * CMMVMV * 2 
What's the MVC solution key idea? * Decoupling data access and business logic from UI * data access + business logic = domain model (one model + several UI) * both * 3
Why the Observer Pattern applied to MVC isn't exactly an Observer? * bcs there are multiple notifies * bcs there's a refresh from Controller Observer to View Observer * because there're different behavior of updates in the two Observers * 2
In MVC how can i reuse interfaces and allow people with different skills to work independently? * building UI in layers * couple all View with Model * couple all View with Controller * 1
If A passes calls to B, B manipulates C and C fires events to A, is: * MVC * MVP * none * 1 
If A passes calls to B that updates A, and B manipulates C that fires events to B, is: * MVC * MVP * none * 2
If A passes calls to B, B manipulates A and C fires events to A, is: * MVC * MVP * none * 3
In MVC what are: distribution over a network is simplified, BL bleeds into Controller, excessive coupling between M&V and M&C * MVC pros * MVC consequences * MVC cons * 2
In MVC: if M is data, V is item visual, C is event-handlers * it's MVC as design pattern * it's MVC as architectural pattern * none * 1
In MVC: if M is domain model, V is UI output, C is UI input * it's MVC as design pattern * it's MVC as architectural pattern * none * 2
What is a crucial challenge solved in the MVP variant of the MVC pattern? * Complicated view implementation * Tight coupling between the View and Model * Insufficient user interaction with the Presenter * 2
According to the information provided, what approach is used to enhance the testability of the MVP pattern? * Data binding between View and Presenter * Dependency injection for the View interface * Direct interaction between the View and Model * 2
Is it true that in MVC type models the Business Logic resides in the Model? * Yes, always * Yes, but in pure MVC the C has to know some BL to select the proper interface * No * 2
In MVVM is it always true that the VM has to handle data for its representation? * Yes, there's no direct communication between V and M * No, if the representation is 100% equal from the Model, the Modell will do * Depends * 2
What's a practical solution to handle data related to user interface interactions in ViewModel? * Introduction of complex data synchronization mechanisms * Hooking the view model to the application core * View delegates specific operations to the View Model via events * 3
What is the primary goal of deployment patterns? * Streamlining hardware availability * Meeting legal constraints * Focusing onto physical distribution of SW * 3
What constraints to take into account for Deployment Patterns? * hardware performance and operative costs * hardware availability and operative costs * hardware availability and deployment costs * 2
What to do in Deployment Patterns if I have to take into account server maximum load and physical performance, and single point of failure? * adding an extra node called load balancer * adding more single point of failures * improving algorithms * 1
According to the text, what unsolved issue is associated with the load balancer in deployment pattern? * load balancing algorithm choice * Session management complexity * Shifting up the single point of failure problem * 3
What connection is highlighted between the Layered Logical Structure and the Layered Physical Structure, as discussed in the material? * Logical distribution improves physical separation * Logical structure enables same name deployment pattern * Physical structure fosters scalability and maintainability * 2
What are the two faces of many distribution patterns (like the many tiers one)? * layered logical structure and layered physical structure * architectural and deployment pattern * both of them * 3
