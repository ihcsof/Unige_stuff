Which method is used for assigning story points based on exponential scaling? * Fibonacci series * T-Shirt Sizing * Rhode Island to Texas scaling * 1
What is the purpose of planning poker in agile development? * To assign tasks based on skill levels * To reach a consensus on story estimates through team discussion * To track user story completion * 2
What is one reason an epic user story might be split into smaller stories? * It has too many acceptance tests * It covers too much information or involves new technology * It lacks documentation * 2
How do user stories differ from use cases? * User stories focus on user needs and expected benefits, whereas use cases focus on system behavior to deliver those benefits * Use cases are centered on simplicity and brevity, while user stories provide detailed system interactions * User stories are used only by developers, while use cases are used only by customers * 1
What is a key aspect of the user story summary process? * User stories must be fixed and unchangeable * Detailed information is added only as needed and often deferred until development * Testing is not considered until after development * 2
When are test cases for user stories created? * Before development begins * Only after full functionality is complete * When the product is released * 1
What is the key difference between priority and estimate in Agile user stories? * Priority determines the order of tasks based on their value, while estimate assesses the effort required to complete them * Priority is based on estimated time to complete, while estimate reflects the financial cost * Priority and estimate are both used to schedule tasks in the order they will be completed * 1
The traditional "relay race" approach to product development, where tasks are handed off sequentially, can hinder the pursuit of speed and flexibility. In contrast, a more holistic "?" approach—where the team works together, passing the ball back and forth—may better align with the fast-paced and competitive demands of today's market (?) * rugby, XP * agile, XP * rugby, scrum * 3
? rules are all the things you could possibly do under all situations, while ? rules are a minimum set of things you must do under all situations to generate appropriate practices for special situations * inclusive, generative * prescriptive, generative * generative, prescriptive * 1
In "Simple-Obvious-Clear, Complicated, Complex, Anarchy & Disorder"  project noise level model, where Scrum resides? * SOC * Complicated * Complex * 3
Scrum projects progress through time-boxed sprints of ? weeks, where the product is designed, coded, and tested, with an agreed-upon Definition of ?, and while sprints may be canceled, this is a ? and traumatic event * 2-4, product, frequent * 2–4, Done, rare * 2-3, Done, frequent * 3
How do acceptance tests differ from unit tests in Agile? * Acceptance tests are written for classes by developers, while unit tests are created from client-provided scenarios * Acceptance tests validate client requirements by automating their test cases, while unit tests focus on verifying individual class functionality in development * Unit tests check client requirements, while acceptance tests are written for each code class * 2
Why must unit tests achieve a 100% pass rate before code commits in Agile development? * To ensure only critical tests are covered * To confirm that all functionality works as expected and to enable continuous integration without failures * To reduce the number of tests required for future sprints * 2
Where does the "design" lies in Scrum? * implicit passage from product backlog and the sprint backlog with task splitting * during each daily sprint meeting * there's no such thing as design phase in Scrum * 1
During the sprint ? and the scope ? between product owner and team * changes can be made, may be clarified and renegotiated * no changes are made, may be clarified and renegotiated * changes can be made, can't be renegotiated * 2
Map the Scrum Roles with Pigs (P) or Chickens (C): Users, Stakeholders, Product Owner, Team, Scrum Master, Cosulting experts * CPPPCC * CCPPPC * PCPPCC * 2
Scrum Teams are: * 5-9 people * fully specialised * organized by a single entity * 1
Who represents stakeholders, defines product features, decides on release dates and content, ensures profitability (ROI), prioritizes features (by market value), adjusts priorities each iteration, and accepts or rejects work results? * Scrum Master * Sium Master * Product Owner * 3
The ? represents management, enacts Scrum values and practices, removes impediments, ensures team productivity, fosters collaboration across roles, and shields the team from external interferences * Scrum Master * Product Owner * Produttone * 1
The ? process involves evaluating team capacity, product backlog, business conditions, current product and technology to prioritize and design a sprint goal and create an estimated sprint backlog * sprint planning meeting * sprint prioritization * sprint planning * 1
In sprint planning, the team collaboratively selects items from the product backlog they can commit to, creates a sprint backlog with tasks estimated between 1-16 hours, and considers high-level design * sprint review * sprint planning * sprint retrospective * 2
The ? is an informal session where the team, with minimal preparation, demos new features or architecture completed during the sprint, involving the entire team and welcoming any attendees * usability testing * sprint review * sprint retrospective * 2
The ? is a 15-30 minute meeting held after each sprint where the whole team, including the ScrumMaster, product owner, and possibly customers, discuss what to start, stop, and continue doing to improve team processes * backlog grooming * sprint review * sprint retrospective * 3
?, the latest Agile ceremony, involves refining the backlog and typically occurs near the end of a sprint, either as part of sprint planning, sprint review, or as a standalone meeting * backlog grooming * sprint review * sprint retrospective * 1
The ? is a 15-minute stand-up meeting held daily, where only team members, the Scrum Master, and Product Owner speak, focusing on updates rather than problem-solving and reducing the need for additional meetings * daily scrum * sprint review * sprint retrospective * 1
Practices are for putting principles in practice, and there's a N-N relationships between the two * true * partially true * false * 1
What does collective code ownership mean? * The code belongs to the entire team, allowing any member to change it * Only team leads can change any part of the code * Each developer owns their code sections individually * 1
Planning game's card moves are: estimate a story, split story, introduce a new story and? * groom backlog, to refine the product backlog * spike, to go deeper on something * delete an old story * 2
Which is the eng-concept for which throwing new resources to finish something first doesn't really help? * elephant in the room * mongolian horde * quantity over quality * 2
When should optimization be considered in the development process? * At the start * During refactoring * At the end, after functionality is complete * 3
What is the truck factor, the number of devs on a team who have to be hit by a truck before the project is in serious trouble? * it means that the remaining devs know less than T% of the modulers * if TF=2 and the truck hits one developer everything is lost * both are true * 1
How should pairs be swapped in pair programming? * with musical chairs * with a swap like: A remains fixed in its area, C swaps in place of B working in the same area of A. Then another time will happen the opposite with A and D * both are true * 3
What is the key principle of Test-Driven Development (TDD)? * Add all tests at the end * Write and run tests first, then add functionality based on the test results * Only create tests if functionality fails * 2
What is required for unit tests before code commits to version control? * 100% passing rate * Partial passing rate * Passing user-defined tests only * 1
What is the purpose of acceptance tests in agile development? * To verify code syntax * To provide criteria for completion and ensure user requirements are met * To test server load and scalability * 2
In continuous integration, when should integration occur at a minimum? * Weekly * At the end of development * At least daily or after each completed user story * 3
What is the purpose of a task board in agile teams? * To document code * To keep track of sprint progress, supporting standups and updates * To track only tests and commits * 2
How is task board usability tested informally? * By having the team leader review it * By using the "hallway usability test" where someone new should understand it quickly * By running a focus group * 2
The interface ? user interactions by defining what actions are possible and how they are executed, with users often equating the interface to the entire system's usability, features, and perceived quality, enhancing it can significantly boost the overall user experience * shapes * is defined by * is shaped * 1
? refers to how easy and intuitive a product is to use, ? ensures it is available to as many people as possible, and ? encompasses the overall feelings, attitudes, and satisfaction of a person when interacting with the product * Accessibility, Usability, UX * Usability, Accessibility, UX * UX, Accessibility, Usability * 2
Order Usability improving steps * set the tasks, get the right set of user, measure results * get the right set of user, set the tasks, measure results * measure all the facets (learnability, then efficiency, memorability, errors and lastly satisfaction) * 2
How is usability testing carryied out? * Using selenium * Asking users with questionaries * "atching users trying to use the system while thinking out loud * 3
?? is effective at quickly identifying issues, but it has drawbacks: formal sessions are costly, feedback is often delayed, and testing can require more resources than fixing the issues themselves. Rapidly discovered issues may remain unresolved for long periods, especially in slower development cycles. Traditional testing involves occasional, intensive sessions that produce extensive documentation, much of which is rarely useful * Poor Man Usability Testing * Agile Usability Testing * Usability testing * 3
Which cognitive science fact impacts web design? * Our memory is perfect * Human attention is limited * Color vision is infinite * 2
What is crucial when designing visual hierarchies? * Use identical font sizes for clarity * Use varied font sizes for importance * Limit content relationships * 2
What approach should be taken with lengthy text on a page? * Expand details for thorough understanding * Remove half, then half again * Use only text; images distract * 2
How should a password strength meter operate? * After form submission * During typing * Only on request * 2
What is the benefit of usability on web projects? * 135% boost in all KPIs * It requires no cost * Leads to higher conversion rates * 3
What factor influences the user's thought cycle? * Execute and skip evaluation * Goal, action, evaluate * Evaluate before setting a goal * 2
