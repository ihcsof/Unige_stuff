Questo eseguibile e` stato prodotto compilando il file sorgente string_master.c
ed e` stato mandato in esecuzione da shell col comando:
./string_master m

Nel file string_master.c, "char zero[LZ];" definisce un array di 5 caratteri, che
viene successivamente inizializzato con "my_strncpy(zero,c);" per contenere una strin-
ga di lunghezza 1 < 5.
Di conseguenza, dopo tale inizializzazione "zero" diventa la stringa: "0"
Sia "*zero" sia "zero[0]" indicano il primo elemento dell'array, ossia la codifica
ASCII del carattere '0' (rappresentato dal numero 48).
Tutte le stringhe devono essere terminate col codice 0 (che non rappresenta un
carattere stampabile), dopo l'ultimo carattere della stringa.

"char c[]={ '0', 0, ... };" definisce un array di 6 caratteri inizializzato staticamen-
te il cui contenuto inizialmente e`:
(c[0]==48) && (c[1]==0) && (c[2]==111) && (c[3]==97) && (c[4]==105) && (c[5]==101)
Ma "c", oltre a rappresentare tale array di 6 caratteri, e` anche una stringa di
lunghezza 1 che gode della proprieta`:
( strcmp(c,zero) == 0 )
e questo perche` contiene il valore 0 in corrispondenza dell'indice 1 ;-)

Ovviamente il contenuto dell'array "c" puo` essere modificato in qualsiasi momento,
per esempio eseguendo l'istruzione "sprintf(c,"%c",'p');" e ottenendo come risultato:
(c[0]==112) && (c[1]==0) && (c[2]==111) && (c[3]==97) && (c[4]==105) && (c[5]==101)

"char * q = c," definisce un puntatore a caratteri allocato automaticamente nello
stack e allo stesso tempo lo inizializza in modo da farlo puntare al primo elemento
dell'array "c".
Quindi sia "*q" che "q[0]" possono essere usati come alias di "*c" e/o di "c[0]" dopo
tale definizione/inizializzazione.
C'e` tuttavia una differenza importante tra "c" e "q": il primo e` solo il nome di
una variabile di tipo array, mentre il secondo e` solo il nome di un'altra variabile
di tipo puntatore!  Di conseguenza il puntatore "q" puo` essere cambiato dopo
l'inizializzazione, per esempio eseguendo l'istruzione "q += lc;", mentre questa
stessa istruzione non avrebbe senso se applicata a "c"!
Dopo questo incremento, il puntatore "q" passa a puntare all'elemento di indice 1
dell'array "c" e quindi puo` essere usato come il nome di un array di 5 caratteri
(che coincidono con gli ultimi 5 elementi di "c".
Siccome ora il primo elemento dell'array "q" contiene il valore 0, "q" e` diventato
anche la stringa vuota "" dopo questo incremento ...
Incrementando ulteriormente il puntatore "q", per esempio valutando l'espressione
"*++q", "q" passa a puntare al carattere successivo di "c" che contiene il valore 111
(diverso da 0).  A questo punto, "q" non e` piu` il nome di una stringa, perche`
nessuno degli elementi dell'array "q" contiene il valore 0 atto a terminare una
stringa.
In effetti, ora abbiamo i seguenti caratteri nell'array "q":oaie

Anche "p" e` un puntatore a carattere esattamente come "q", ma poiche` e` stato
inizializzato al valore NULL (che corrisponde al valore 0), non puo` essere usato
per accedere alla memoria, pena un Segmentation Fault.
Solo dopo avergli assegnato un valore appropriato diverso da NULL, per esempio
eseguendo l'istruzione "p=c;" lo si puo` correttamente usare per indirizzare la
memoria, per esempio eseguendo l'istruzione
"if(argc>1&&strlen(argv[1])>1&&argv[1][1]==p[0])i+=2;"

Bravo!
